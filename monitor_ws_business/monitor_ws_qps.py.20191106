#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Date    : 2019-09-17 10:03:08
# @Author  : lizhansheng (lizhansheng@sogou-inc.com)

from monitor_ws_conf import *
from monitor_ws_conndb import ConnRedis
import logging
import sys


logging.basicConfig(
    format="[%(asctime)s] [file:%(filename)s] [line:%(lineno)s] [col:%(levelno)s], [%(message)s]"
)
logging.getLogger().setLevel(logging.INFO)



class MonitorWSQPS(object):

	@classmethod
	def fetch_city_map(cls):
		try:
			redis = ConnRedis.conn_redis()
		except Exception as err:
			logging.error("Connecting Redis fail[%s]"%(err))
			sys.exit(1)

		try:
			city_code_map = redis.get('city_code_map')
		except Exception as err:
			logging.error("Fetch data from Redis fail[%s]"%(err))
			sys.exit(1)
		return eval(city_code_map)

	@classmethod
	def ws_qps(cls, data, interval):
		city_code_map = None
		qps_dict = {}
		city_code_map = cls.fetch_city_map()
		
		try:
			for line in data:

				province_code = int(line[3])/100*100
				#index="{}_{}_{}".format(line[8], province_code, line[3])
				index="{}_{}".format(line[8], province_code)
				ad_num = int(line[6])
				is_ad = int(line[7])
				#if str(line[8]) in {'10.134.73.35', '10.134.104.119'}:
				#	print line
				if index in qps_dict.keys():
					qps_dict[index][0] += 1
					qps_dict[index][1] += ad_num
					qps_dict[index][2] += is_ad

				else:
					qps_dict[index] = [1, ad_num, is_ad]


		except IndexError as err:
			logging.error(err)
	

		for k,v in qps_dict.items():
			ip = k.split('_')[0]
			try:
				#city = city_code_map[k.split('_')[2]]
				province = city_code_map[k.split('_')[1]]
			except Exception as err:
				logging.error("Find city_code_map error[%s]"%(err,))
				
			qps = v[0]/interval
			qps2 = v[1]/interval
			qps3 = v[2]/interval

			if ip in bj_server_list:
				region = 'ws_server_bj'
			if ip in gd_server_list:
				region = 'ws_server_gd'
			if ip in js_server_list:
				region = 'ws_server_js'
			if ip in sk_server_list:
				region = 'ws_server_bj_sk'
			if ip in pweb_server_list:
				region = 'ws_server_pweb'
			#ws_server_qps.labels(region, province, city, ip).set(qps)
			ws_server_qps.labels(region, province, ip).set(qps)
			ws_server_qps1.labels(region, province, ip, '1').set(qps)
			ws_server_qps1.labels(region, province, ip, '2').set(qps1)
			ws_server_qps1.labels(region, province, ip, '3').set(qps2)
			#print "region: {}   province: {}  ip: {}   qps: {}".format(region, province, ip, qps)








###	'''==============================================================='''
###	'''======================== 按机器和机房统计 ========================'''
###	'''==============================================================='''
###	@classmethod
###	def ws_server_bj_sk_qps(cls, data):
###		
###		for ip in cls.sk_server_list:
###			bj_sk_qps = 0
###			for line in data:
###				try:
###					if line[8] == ip:
###						bj_sk_qps+= 1
###				except IndexError as err:
###					logging.error(err)
###					bj_sk_qps = 0
###			ws_server_qps.labels('ws_server_bj_sk', ip).set(bj_sk_qps)
###
###
###
###
###
###	@classmethod
###	def ws_server_bj_qps(cls, data):
###
###		for ip in cls.bj_server_list:
###			bj_qps = 0
###			for line in data:
###
###				try:
###					if line[8] == ip:
###						bj_qps += int(line[0])
###				except IndexError as err:
###					logging.error(err)
###					bj_qps = 0
###			ws_server_qps.labels('ws_server_bj', ip).set(bj_qps)
###
###
###	@classmethod
###	def ws_server_gd_qps(cls, data):
###
###		for ip in cls.gd_server_list:
###			gd_qps = 0
###			for line in data:
###				
###				try:
###					if line[3] == ip:
###						gd_qps += int(line[0])
###				except IndexError as err:
###					logging.error(err)
###					gd_qps = 0
###			ws_server_qps.labels('ws_server_gd', ip).set(gd_qps)
###
###
###	@classmethod
###	def ws_server_js_qps(cls, data):
###		
###		for ip in cls.js_server_list:
###			js_qps = 0
###			for line in data:
###				try:
###					if line[3] == ip:
###						js_qps += int(line[0])
###				except IndexError as err:
###					logging.error(err)
###					js_qps = 0
###			ws_server_qps.labels('ws_server_js', ip).set(js_qps/100)

